services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: concert_db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=concertdb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - concert_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API (NestJS)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: concert_backend
    env_file:
      - ./backend/env.example
    ports:
      - "${PORT:-3000}:${PORT:-3000}"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - concert_network
    volumes:
      - ./backend:/app
      - /app/node_modules
    restart: unless-stopped

  # Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: concert_frontend
    env_file:
      - ./frontend/env.example
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:${PORT:-3000}
      PORT: ${FRONTEND_PORT:-8080}
    expose:
      - "${FRONTEND_PORT:-8080}"
    depends_on:
      - backend
    networks:
      - concert_network
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: concert_nginx
    ports:
      - "${NGINX_PORT:-80}:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - concert_network

volumes:
  postgres_data:

networks:
  concert_network:
    driver: bridge 